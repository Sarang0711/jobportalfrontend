[{"D:\\Internship\\job-portal\\frontend\\src\\index.js":"1","D:\\Internship\\job-portal\\frontend\\src\\App.js":"2","D:\\Internship\\job-portal\\frontend\\src\\reportWebVitals.js":"3","D:\\Internship\\job-portal\\frontend\\src\\component\\Welcome.js":"4","D:\\Internship\\job-portal\\frontend\\src\\component\\Login.js":"5","D:\\Internship\\job-portal\\frontend\\src\\component\\Signup.js":"6","D:\\Internship\\job-portal\\frontend\\src\\component\\Home.js":"7","D:\\Internship\\job-portal\\frontend\\src\\component\\Logout.js":"8","D:\\Internship\\job-portal\\frontend\\src\\component\\Applications.js":"9","D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js":"10","D:\\Internship\\job-portal\\frontend\\src\\component\\Profile.js":"11","D:\\Internship\\job-portal\\frontend\\src\\component\\Navbar.js":"12","D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js":"13","D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"14","D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\Profile.js":"15","D:\\Internship\\job-portal\\frontend\\src\\lib\\isAuth.js":"16","D:\\Internship\\job-portal\\frontend\\src\\lib\\MessagePopup.js":"17","D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js":"18","D:\\Internship\\job-portal\\frontend\\src\\lib\\EmailInput.js":"19","D:\\Internship\\job-portal\\frontend\\src\\lib\\PasswordInput.js":"20","D:\\Internship\\job-portal\\frontend\\src\\lib\\apiList.js":"21","D:\\Internship\\job-portal\\frontend\\src\\lib\\FileUploadInput.js":"22","D:\\INeuron Internship\\frontend\\src\\index.js":"23","D:\\INeuron Internship\\frontend\\src\\App.js":"24","D:\\INeuron Internship\\frontend\\src\\reportWebVitals.js":"25","D:\\INeuron Internship\\frontend\\src\\component\\Logout.js":"26","D:\\INeuron Internship\\frontend\\src\\component\\Welcome.js":"27","D:\\INeuron Internship\\frontend\\src\\component\\Navbar.js":"28","D:\\INeuron Internship\\frontend\\src\\component\\Login.js":"29","D:\\INeuron Internship\\frontend\\src\\component\\Applications.js":"30","D:\\INeuron Internship\\frontend\\src\\component\\Profile.js":"31","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"32","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\CreateJobs.js":"33","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\JobApplications.js":"34","D:\\INeuron Internship\\frontend\\src\\component\\Home.js":"35","D:\\INeuron Internship\\frontend\\src\\component\\Signup.js":"36","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\MyJobs.js":"37","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\Profile.js":"38","D:\\INeuron Internship\\frontend\\src\\lib\\isAuth.js":"39","D:\\INeuron Internship\\frontend\\src\\lib\\MessagePopup.js":"40","D:\\INeuron Internship\\frontend\\src\\lib\\PasswordInput.js":"41","D:\\INeuron Internship\\frontend\\src\\lib\\EmailInput.js":"42","D:\\INeuron Internship\\frontend\\src\\lib\\apiList.js":"43","D:\\INeuron Internship\\frontend\\src\\lib\\FileUploadInput.js":"44","C:\\Users\\Hp\\Desktop\\frontend\\src\\index.js":"45","C:\\Users\\Hp\\Desktop\\frontend\\src\\App.js":"46","C:\\Users\\Hp\\Desktop\\frontend\\src\\reportWebVitals.js":"47","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Navbar.js":"48","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Login.js":"49","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Welcome.js":"50","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Home.js":"51","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Applications.js":"52","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Logout.js":"53","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Signup.js":"54","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\CreateJobs.js":"55","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\JobApplications.js":"56","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"57","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Profile.js":"58","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\MyJobs.js":"59","C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\MessagePopup.js":"60","C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\Profile.js":"61","C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\isAuth.js":"62","C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\EmailInput.js":"63","C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\PasswordInput.js":"64","C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\apiList.js":"65","C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\FileUploadInput.js":"66"},{"size":517,"mtime":1684568215885,"results":"67","hashOfConfig":"68"},{"size":3443,"mtime":1684568215878,"results":"69","hashOfConfig":"68"},{"size":375,"mtime":1684568215887,"results":"70","hashOfConfig":"68"},{"size":775,"mtime":1684568215881,"results":"71","hashOfConfig":"68"},{"size":3691,"mtime":1684568215880,"results":"72","hashOfConfig":"68"},{"size":14812,"mtime":1684568215881,"results":"73","hashOfConfig":"68"},{"size":21741,"mtime":1684568215879,"results":"74","hashOfConfig":"68"},{"size":509,"mtime":1684568215880,"results":"75","hashOfConfig":"68"},{"size":7626,"mtime":1684568215879,"results":"76","hashOfConfig":"68"},{"size":8403,"mtime":1684568215882,"results":"77","hashOfConfig":"68"},{"size":8836,"mtime":1684568215880,"results":"78","hashOfConfig":"68"},{"size":2627,"mtime":1684568215880,"results":"79","hashOfConfig":"68"},{"size":26561,"mtime":1684568215883,"results":"80","hashOfConfig":"68"},{"size":25164,"mtime":1684568215882,"results":"81","hashOfConfig":"68"},{"size":5201,"mtime":1684568215884,"results":"82","hashOfConfig":"68"},{"size":174,"mtime":1684568215886,"results":"83","hashOfConfig":"68"},{"size":523,"mtime":1684568215886,"results":"84","hashOfConfig":"68"},{"size":22988,"mtime":1684568215883,"results":"85","hashOfConfig":"68"},{"size":1210,"mtime":1684568215885,"results":"86","hashOfConfig":"68"},{"size":1724,"mtime":1684568215886,"results":"87","hashOfConfig":"68"},{"size":452,"mtime":1684568215886,"results":"88","hashOfConfig":"68"},{"size":3392,"mtime":1684568215885,"results":"89","hashOfConfig":"68"},{"size":517,"mtime":1684568215885,"results":"90","hashOfConfig":"91"},{"size":3858,"mtime":1684585807858,"results":"92","hashOfConfig":"91"},{"size":375,"mtime":1684568215887,"results":"93","hashOfConfig":"91"},{"size":509,"mtime":1684568215880,"results":"94","hashOfConfig":"91"},{"size":775,"mtime":1684568215881,"results":"95","hashOfConfig":"91"},{"size":2627,"mtime":1684568215880,"results":"96","hashOfConfig":"91"},{"size":3691,"mtime":1684590074143,"results":"97","hashOfConfig":"91"},{"size":7626,"mtime":1684568215879,"results":"98","hashOfConfig":"91"},{"size":8836,"mtime":1684568215880,"results":"99","hashOfConfig":"91"},{"size":25164,"mtime":1684568215882,"results":"100","hashOfConfig":"91"},{"size":8403,"mtime":1684568215882,"results":"101","hashOfConfig":"91"},{"size":22988,"mtime":1684568215883,"results":"102","hashOfConfig":"91"},{"size":21741,"mtime":1684568215879,"results":"103","hashOfConfig":"91"},{"size":14812,"mtime":1684568215881,"results":"104","hashOfConfig":"91"},{"size":26561,"mtime":1684568215883,"results":"105","hashOfConfig":"91"},{"size":5201,"mtime":1684568215884,"results":"106","hashOfConfig":"91"},{"size":174,"mtime":1684568215886,"results":"107","hashOfConfig":"91"},{"size":523,"mtime":1684568215886,"results":"108","hashOfConfig":"91"},{"size":1724,"mtime":1684568215886,"results":"109","hashOfConfig":"91"},{"size":1210,"mtime":1684568215885,"results":"110","hashOfConfig":"91"},{"size":475,"mtime":1684586414901,"results":"111","hashOfConfig":"91"},{"size":3392,"mtime":1684568215885,"results":"112","hashOfConfig":"91"},{"size":517,"mtime":1684568215885,"results":"113","hashOfConfig":"114"},{"size":3858,"mtime":1684585807858,"results":"115","hashOfConfig":"114"},{"size":375,"mtime":1684568215887,"results":"116","hashOfConfig":"114"},{"size":2627,"mtime":1684568215880,"results":"117","hashOfConfig":"114"},{"size":3691,"mtime":1684590074143,"results":"118","hashOfConfig":"114"},{"size":775,"mtime":1684568215881,"results":"119","hashOfConfig":"114"},{"size":21741,"mtime":1684568215879,"results":"120","hashOfConfig":"114"},{"size":7626,"mtime":1684568215879,"results":"121","hashOfConfig":"114"},{"size":509,"mtime":1684568215880,"results":"122","hashOfConfig":"114"},{"size":14812,"mtime":1684568215881,"results":"123","hashOfConfig":"114"},{"size":8403,"mtime":1684568215882,"results":"124","hashOfConfig":"114"},{"size":22988,"mtime":1684568215883,"results":"125","hashOfConfig":"114"},{"size":25164,"mtime":1684568215882,"results":"126","hashOfConfig":"114"},{"size":8836,"mtime":1684568215880,"results":"127","hashOfConfig":"114"},{"size":26561,"mtime":1684568215883,"results":"128","hashOfConfig":"114"},{"size":523,"mtime":1684568215886,"results":"129","hashOfConfig":"114"},{"size":5201,"mtime":1684568215884,"results":"130","hashOfConfig":"114"},{"size":174,"mtime":1684568215886,"results":"131","hashOfConfig":"114"},{"size":1210,"mtime":1684568215885,"results":"132","hashOfConfig":"114"},{"size":1724,"mtime":1684568215886,"results":"133","hashOfConfig":"114"},{"size":475,"mtime":1684586414901,"results":"134","hashOfConfig":"114"},{"size":3392,"mtime":1684568215885,"results":"135","hashOfConfig":"114"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ugtibk",{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ei7aul",{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"189"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"189"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"189"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"189"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"189"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"189"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"189"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"189"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"189"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"189"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zvq16y",{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"264","messages":"265","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Internship\\job-portal\\frontend\\src\\index.js",[],"D:\\Internship\\job-portal\\frontend\\src\\App.js",["280"],"D:\\Internship\\job-portal\\frontend\\src\\reportWebVitals.js",[],"D:\\Internship\\job-portal\\frontend\\src\\component\\Welcome.js",[],"D:\\Internship\\job-portal\\frontend\\src\\component\\Login.js",["281"],"D:\\Internship\\job-portal\\frontend\\src\\component\\Signup.js",["282","283"],"D:\\Internship\\job-portal\\frontend\\src\\component\\Home.js",["284","285","286","287","288","289","290"],"D:\\Internship\\job-portal\\frontend\\src\\component\\Logout.js",["291"],"D:\\Internship\\job-portal\\frontend\\src\\component\\Applications.js",["292","293","294","295","296","297","298","299","300"],"D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js",["301","302"],"D:\\Internship\\job-portal\\frontend\\src\\component\\Profile.js",["303","304","305","306","307","308","309"],"D:\\Internship\\job-portal\\frontend\\src\\component\\Navbar.js",[],"D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js",["310","311","312","313","314","315"],"D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["316","317","318","319","320","321","322","323","324"],"D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\Profile.js",["325","326","327"],"D:\\Internship\\job-portal\\frontend\\src\\lib\\isAuth.js",[],"D:\\Internship\\job-portal\\frontend\\src\\lib\\MessagePopup.js",["328"],"D:\\Internship\\job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js",["329","330","331","332","333","334"],"D:\\Internship\\job-portal\\frontend\\src\\lib\\EmailInput.js",[],"D:\\Internship\\job-portal\\frontend\\src\\lib\\PasswordInput.js",[],"D:\\Internship\\job-portal\\frontend\\src\\lib\\apiList.js",[],"D:\\Internship\\job-portal\\frontend\\src\\lib\\FileUploadInput.js",[],"D:\\INeuron Internship\\frontend\\src\\index.js",[],"D:\\INeuron Internship\\frontend\\src\\App.js",["335"],"D:\\INeuron Internship\\frontend\\src\\reportWebVitals.js",[],"D:\\INeuron Internship\\frontend\\src\\component\\Logout.js",["336"],"import { useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nconst Logout = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"type\");\r\n    setPopup({\r\n      open: true,\r\n      severity: \"success\",\r\n      message: \"Logged out successfully\",\r\n    });\r\n  }, []);\r\n  return <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport default Logout;\r\n",["337","338"],"D:\\INeuron Internship\\frontend\\src\\component\\Welcome.js",[],"D:\\INeuron Internship\\frontend\\src\\component\\Navbar.js",[],"D:\\INeuron Internship\\frontend\\src\\component\\Login.js",["339"],"D:\\INeuron Internship\\frontend\\src\\component\\Applications.js",["340","341","342","343","344","345","346","347","348"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [rating, setRating] = useState(application.job.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const joinedOn = new Date(application.dateOfJoining);\r\n\r\n  const fetchRating = () => {\r\n    axios\r\n      .get(`${apiList.rating}?id=${application.job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRating(response.data.rating);\r\n        console.log(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, jobId: application.job._id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">{application.job.title}</Typography>\r\n          </Grid>\r\n          <Grid item>Posted By: {application.recruiter.name}</Grid>\r\n          <Grid item>Role : {application.job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {application.job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {application.job.duration !== 0\r\n              ? `${application.job.duration} month`\r\n              : `Flexible`}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          {application.status === \"accepted\" ||\r\n          application.status === \"finished\" ? (\r\n            <Grid item>Joined On: {joinedOn.toLocaleDateString()}</Grid>\r\n          ) : null}\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item xs>\r\n            <Paper\r\n              className={classes.statusBlock}\r\n              style={{\r\n                background: colorSet[application.status],\r\n                color: \"#ffffff\",\r\n              }}\r\n            >\r\n              {application.status}\r\n            </Paper>\r\n          </Grid>\r\n          {application.status === \"accepted\" ||\r\n          application.status === \"finished\" ? (\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.statusBlock}\r\n                onClick={() => {\r\n                  fetchRating();\r\n                  setOpen(true);\r\n                }}\r\n              >\r\n                Rate Job\r\n              </Button>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst Applications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.applications, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Applications</Typography>\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        item\r\n        xs\r\n        direction=\"column\"\r\n        style={{ width: \"100%\" }}\r\n        alignItems=\"stretch\"\r\n        justify=\"center\"\r\n      >\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item>\r\n              <ApplicationTile application={obj} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n","D:\\INeuron Internship\\frontend\\src\\component\\Profile.js",["349","350","351","352","353","354","355"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid item container className={classes.inputBox} key={key}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [userData, setUserData] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n  });\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        if (response.data.education.length > 0) {\r\n          setEducation(\r\n            response.data.education.map((edu) => ({\r\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\r\n              startYear: edu.startYear ? edu.startYear : \"\",\r\n              endYear: edu.endYear ? edu.endYear : \"\",\r\n            }))\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const editDetails = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Profile</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Paper\r\n            style={{\r\n              padding: \"20px\",\r\n              outline: \"none\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={profileDetails.name}\r\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\r\n                  className={classes.inputBox}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <MultifieldInput\r\n                education={education}\r\n                setEducation={setEducation}\r\n              />\r\n              <Grid item>\r\n                <ChipInput\r\n                  className={classes.inputBox}\r\n                  label=\"Skills\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Press enter to add skills\"\r\n                  value={profileDetails.skills}\r\n                  onAdd={(chip) =>\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: [...profileDetails.skills, chip],\r\n                    })\r\n                  }\r\n                  onDelete={(chip, index) => {\r\n                    let skills = profileDetails.skills;\r\n                    skills.splice(index, 1);\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: skills,\r\n                    });\r\n                  }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Resume (.pdf)\"\r\n                  icon={<DescriptionIcon />}\r\n                  uploadTo={apiList.uploadResume}\r\n                  handleInput={handleInput}\r\n                  identifier={\"resume\"}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Profile Photo (.jpg/.png)\"\r\n                  icon={<FaceIcon />}\r\n                  uploadTo={apiList.uploadProfileImage}\r\n                  handleInput={handleInput}\r\n                  identifier={\"profile\"}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n              onClick={() => handleUpdate()}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Modal open={open} onClose={handleClose} className={classes.popupDialog}> */}\r\n\r\n      {/* </Modal> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["356","357","358","359","360","361","362","363","364"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          {/* <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Application Status\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"rejected\"\r\n                      checked={searchOptions.status.rejected}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Rejected\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"applied\"\r\n                      checked={searchOptions.status.applied}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Applied\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"shortlisted\"\r\n                      checked={searchOptions.status.shortlisted}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Shortlisted\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid> */}\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"jobTitle\"\r\n                    checked={searchOptions.sort[\"job.title\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"jobTitle\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"jobTitle\">\r\n                    <Typography>Job Title</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"job.title\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            desc: !searchOptions.sort[\"job.title\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"job.title\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfJoining\"\r\n                    checked={searchOptions.sort.dateOfJoining.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfJoining\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfJoining\">\r\n                    <Typography>Date of Joining</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfJoining.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            desc: !searchOptions.sort.dateOfJoining.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfJoining.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEndJob, setOpenEndJob] = useState(false);\r\n  const [rating, setRating] = useState(application.jobApplicant.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, applicantId: application.jobApplicant.userId },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEndJob = () => {\r\n    setOpenEndJob(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${server}${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      axios(address, {\r\n        method: \"GET\",\r\n        responseType: \"blob\",\r\n      })\r\n        .then((response) => {\r\n          const file = new Blob([response.data], { type: \"application/pdf\" });\r\n          const fileURL = URL.createObjectURL(file);\r\n          window.open(fileURL);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Error\",\r\n          });\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleCloseEndJob();\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n        handleCloseEndJob();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          xs={2}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar\r\n            src={`${server}${application.jobApplicant.profile}`}\r\n            className={classes.avatar}\r\n          />\r\n        </Grid>\r\n        <Grid container item xs={7} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">\r\n              {application.jobApplicant.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating\r\n              value={\r\n                application.jobApplicant.rating !== -1\r\n                  ? application.jobApplicant.rating\r\n                  : null\r\n              }\r\n              readOnly\r\n            />\r\n          </Grid>\r\n          <Grid item>Job Title: {application.job.title}</Grid>\r\n          <Grid item>Role: {application.job.jobType}</Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>\r\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.jobApplicant.skills.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              color=\"primary\"\r\n              onClick={() => getResume()}\r\n            >\r\n              Download Resume\r\n            </Button>\r\n          </Grid>\r\n          <Grid item container xs>\r\n            {/* {buttonSet[application.status]} */}\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              style={{\r\n                background: \"#09BC8A\",\r\n              }}\r\n              onClick={() => {\r\n                setOpenEndJob(true);\r\n              }}\r\n            >\r\n              End Job\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n            >\r\n              Rate Applicant\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openEndJob}\r\n        onClose={handleCloseEndJob}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => {\r\n                  updateStatus(\"finished\");\r\n                }}\r\n              >\r\n                Yes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseEndJob()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst AcceptedApplicants = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      \"job.title\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfJoining: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    searchParams = [...searchParams, `status=accepted`];\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Employees</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton onClick={() => setFilterOpen(true)}>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          style={{ width: \"100%\" }}\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {applications.length > 0 ? (\r\n            applications.map((obj) => (\r\n              <Grid item>\r\n                {/* {console.log(obj)} */}\r\n                <ApplicationTile application={obj} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No Applications Found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AcceptedApplicants;\r\n","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\CreateJobs.js",["365","366"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst CreateJobs = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [jobDetails, setJobDetails] = useState({\r\n    title: \"\",\r\n    maxApplicants: 100,\r\n    maxPositions: 30,\r\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n      .toISOString()\r\n      .substr(0, 16),\r\n    skillsets: [],\r\n    jobType: \"Full Time\",\r\n    duration: 0,\r\n    salary: 0,\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(jobDetails);\r\n    axios\r\n      .post(apiList.jobs, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        setJobDetails({\r\n          title: \"\",\r\n          maxApplicants: 100,\r\n          maxPositions: 30,\r\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .substr(0, 16),\r\n          skillsets: [],\r\n          jobType: \"Full Time\",\r\n          duration: 0,\r\n          salary: 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Add Job</Typography>\r\n        </Grid>\r\n        <Grid item container xs direction=\"column\" justify=\"center\">\r\n          <Grid item>\r\n            <Paper\r\n              style={{\r\n                padding: \"20px\",\r\n                outline: \"none\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}\r\n              >\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    value={jobDetails.title}\r\n                    onChange={(event) =>\r\n                      handleInput(\"title\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <ChipInput\r\n                    className={classes.inputBox}\r\n                    label=\"Skills\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press enter to add skills\"\r\n                    value={jobDetails.skillsets}\r\n                    onAdd={(chip) =>\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: [...jobDetails.skillsets, chip],\r\n                      })\r\n                    }\r\n                    onDelete={(chip, index) => {\r\n                      let skillsets = jobDetails.skillsets;\r\n                      skillsets.splice(index, 1);\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: skillsets,\r\n                      });\r\n                    }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Job Type\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.jobType}\r\n                    onChange={(event) => {\r\n                      handleInput(\"jobType\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\r\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\r\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Duration\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.duration}\r\n                    onChange={(event) => {\r\n                      handleInput(\"duration\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value={0}>Flexible</MenuItem>\r\n                    <MenuItem value={1}>1 Month</MenuItem>\r\n                    <MenuItem value={2}>2 Months</MenuItem>\r\n                    <MenuItem value={3}>3 Months</MenuItem>\r\n                    <MenuItem value={4}>4 Months</MenuItem>\r\n                    <MenuItem value={5}>5 Months</MenuItem>\r\n                    <MenuItem value={6}>6 Months</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Salary\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.salary}\r\n                    onChange={(event) => {\r\n                      handleInput(\"salary\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 0 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Application Deadline\"\r\n                    type=\"datetime-local\"\r\n                    value={jobDetails.deadline}\r\n                    onChange={(event) => {\r\n                      handleInput(\"deadline\", event.target.value);\r\n                    }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Maximum Number Of Applicants\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxApplicants}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxApplicants\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Positions Available\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxPositions}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxPositions\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n                onClick={() => handleUpdate()}\r\n              >\r\n                Create Job\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateJobs;\r\n","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\JobApplications.js",["367","368","369","370","371","372"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Application Status\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"rejected\"\r\n                      checked={searchOptions.status.rejected}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Rejected\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"applied\"\r\n                      checked={searchOptions.status.applied}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Applied\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"shortlisted\"\r\n                      checked={searchOptions.status.shortlisted}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Shortlisted\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfApplication\"\r\n                    checked={searchOptions.sort.dateOfApplication.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfApplication\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfApplication\">\r\n                    <Typography>Date of Application</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfApplication.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            desc: !searchOptions.sort.dateOfApplication.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfApplication.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${server}${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      axios(address, {\r\n        method: \"GET\",\r\n        responseType: \"blob\",\r\n      })\r\n        .then((response) => {\r\n          const file = new Blob([response.data], { type: \"application/pdf\" });\r\n          const fileURL = URL.createObjectURL(file);\r\n          window.open(fileURL);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Error\",\r\n          });\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  const buttonSet = {\r\n    applied: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"shortlisted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"shortlisted\")}\r\n          >\r\n            Shortlist\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    shortlisted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"accepted\")}\r\n          >\r\n            Accept\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    rejected: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Rejected\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    accepted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Accepted\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    cancelled: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"cancelled\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Cancelled\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    finished: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"finished\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Finished\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          xs={2}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar\r\n            src={`${server}${application.jobApplicant.profile}`}\r\n            className={classes.avatar}\r\n          />\r\n        </Grid>\r\n        <Grid container item xs={7} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">\r\n              {application.jobApplicant.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating\r\n              value={\r\n                application.jobApplicant.rating !== -1\r\n                  ? application.jobApplicant.rating\r\n                  : null\r\n              }\r\n              readOnly\r\n            />\r\n          </Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>\r\n            Education:{\" \"}\r\n            {application.jobApplicant.education\r\n              .map((edu) => {\r\n                return `${edu.institutionName} (${edu.startYear}-${\r\n                  edu.endYear ? edu.endYear : \"Ongoing\"\r\n                })`;\r\n              })\r\n              .join(\", \")}\r\n          </Grid>\r\n          <Grid item>\r\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.jobApplicant.skills.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              color=\"primary\"\r\n              onClick={() => getResume()}\r\n            >\r\n              Download Resume\r\n            </Button>\r\n          </Grid>\r\n          <Grid item container xs>\r\n            {buttonSet[application.status]}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            // onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst JobApplications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const { jobId } = useParams();\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    status: {\r\n      all: false,\r\n      applied: false,\r\n      shortlisted: false,\r\n    },\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfApplication: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n\r\n    if (searchOptions.status.rejected) {\r\n      searchParams = [...searchParams, `status=rejected`];\r\n    }\r\n    if (searchOptions.status.applied) {\r\n      searchParams = [...searchParams, `status=applied`];\r\n    }\r\n    if (searchOptions.status.shortlisted) {\r\n      searchParams = [...searchParams, `status=shortlisted`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}?jobId=${jobId}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}&${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Applications</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton onClick={() => setFilterOpen(true)}>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          style={{ width: \"100%\" }}\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {applications.length > 0 ? (\r\n            applications.map((obj) => (\r\n              <Grid item>\r\n                {/* {console.log(obj)} */}\r\n                <ApplicationTile application={obj} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No Applications Found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobApplications;\r\n","D:\\INeuron Internship\\frontend\\src\\component\\Home.js",["373","374","375","376","377","378","379"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  const { job } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [sop, setSop] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSop(\"\");\r\n  };\r\n\r\n  const handleApply = () => {\r\n    console.log(job._id);\r\n    console.log(sop);\r\n    axios\r\n      .post(\r\n        `${apiList.jobs}/${job._id}/applications`,\r\n        {\r\n          sop: sop,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const deadline = new Date(job.deadline).toLocaleDateString();\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">{job.title}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n          </Grid>\r\n          <Grid item>Role : {job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n          </Grid>\r\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\r\n          <Grid item>Application Deadline : {deadline}</Grid>\r\n\r\n          <Grid item>\r\n            {job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => {\r\n              setOpen(true);\r\n            }}\r\n            disabled={userType() === \"recruiter\"}\r\n          >\r\n            Apply\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"50%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Write SOP (upto 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\r\n            variant=\"outlined\"\r\n            value={sop}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n != \"\";\r\n                }).length <= 250\r\n              ) {\r\n                setSop(event.target.value);\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => handleApply()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(\r\n          response.data.filter((obj) => {\r\n            const today = new Date();\r\n            const deadline = new Date(obj.deadline);\r\n            return deadline > today;\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\">Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <TextField\r\n              label=\"Search Jobs\"\r\n              value={searchOptions.query}\r\n              onChange={(event) =>\r\n                setSearchOptions({\r\n                  ...searchOptions,\r\n                  query: event.target.value,\r\n                })\r\n              }\r\n              onKeyPress={(ev) => {\r\n                if (ev.key === \"Enter\") {\r\n                  getData();\r\n                }\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment>\r\n                    <IconButton onClick={() => getData()}>\r\n                      <SearchIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              style={{ width: \"500px\" }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => {\r\n              return <JobTile job={job} />;\r\n            })\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <Pagination count={10} color=\"primary\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\INeuron Internship\\frontend\\src\\component\\Signup.js",["380","381"],"import { useState, useContext } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  MenuItem,\r\n  Input,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"60px 60px\",\r\n  },\r\n  inputBox: {\r\n    width: \"400px\",\r\n  },\r\n  submitButton: {\r\n    width: \"400px\",\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid\r\n          item\r\n          container\r\n          className={classes.inputBox}\r\n          key={key}\r\n          style={{ paddingLeft: 0, paddingRight: 0 }}\r\n        >\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [signupDetails, setSignupDetails] = useState({\r\n    type: \"applicant\",\r\n    email: \"\",\r\n    password: \"\",\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    name: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setSignupDetails({\r\n      ...signupDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        required: true,\r\n        untouched: false,\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleLoginRecruiter = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    console.log(updatedDetails);\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Paper elevation={3} className={classes.body}>\r\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography variant=\"h3\" component=\"h2\">\r\n            Signup\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            select\r\n            label=\"Category\"\r\n            variant=\"outlined\"\r\n            className={classes.inputBox}\r\n            value={signupDetails.type}\r\n            onChange={(event) => {\r\n              handleInput(\"type\", event.target.value);\r\n            }}\r\n          >\r\n            <MenuItem value=\"applicant\">Applicant</MenuItem>\r\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            label=\"Name\"\r\n            value={signupDetails.name}\r\n            onChange={(event) => handleInput(\"name\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.name.error}\r\n            helperText={inputErrorHandler.name.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"name\", true, \"Name is required\");\r\n              } else {\r\n                handleInputError(\"name\", false, \"\");\r\n              }\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <EmailInput\r\n            label=\"Email\"\r\n            value={signupDetails.email}\r\n            onChange={(event) => handleInput(\"email\", event.target.value)}\r\n            inputErrorHandler={inputErrorHandler}\r\n            handleInputError={handleInputError}\r\n            className={classes.inputBox}\r\n            required={true}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <PasswordInput\r\n            label=\"Password\"\r\n            value={signupDetails.password}\r\n            onChange={(event) => handleInput(\"password\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.password.error}\r\n            helperText={inputErrorHandler.password.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"password\", true, \"Password is required\");\r\n              } else {\r\n                handleInputError(\"password\", false, \"\");\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n        {signupDetails.type === \"applicant\" ? (\r\n          <>\r\n            <MultifieldInput\r\n              education={education}\r\n              setEducation={setEducation}\r\n            />\r\n            <Grid item>\r\n              <ChipInput\r\n                className={classes.inputBox}\r\n                label=\"Skills\"\r\n                variant=\"outlined\"\r\n                helperText=\"Press enter to add skills\"\r\n                onChange={(chips) =>\r\n                  setSignupDetails({ ...signupDetails, skills: chips })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Resume (.pdf)\"\r\n                icon={<DescriptionIcon />}\r\n                // value={files.resume}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     resume: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadResume}\r\n                handleInput={handleInput}\r\n                identifier={\"resume\"}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Profile Photo (.jpg/.png)\"\r\n                icon={<FaceIcon />}\r\n                // value={files.profileImage}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     profileImage: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadProfileImage}\r\n                handleInput={handleInput}\r\n                identifier={\"profile\"}\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item style={{ width: \"100%\" }}>\r\n              <TextField\r\n                label=\"Bio (upto 250 words)\"\r\n                multiline\r\n                rows={8}\r\n                style={{ width: \"100%\" }}\r\n                variant=\"outlined\"\r\n                value={signupDetails.bio}\r\n                onChange={(event) => {\r\n                  if (\r\n                    event.target.value.split(\" \").filter(function (n) {\r\n                      return n != \"\";\r\n                    }).length <= 250\r\n                  ) {\r\n                    handleInput(\"bio\", event.target.value);\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <PhoneInput\r\n                country={\"in\"}\r\n                value={phone}\r\n                onChange={(phone) => setPhone(phone)}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              signupDetails.type === \"applicant\"\r\n                ? handleLogin()\r\n                : handleLoginRecruiter();\r\n            }}\r\n            className={classes.submitButton}\r\n          >\r\n            Signup\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n// {/* <Grid item>\r\n//           <PasswordInput\r\n//             label=\"Re-enter Password\"\r\n//             value={signupDetails.tmpPassword}\r\n//             onChange={(event) => handleInput(\"tmpPassword\", event.target.value)}\r\n//             className={classes.inputBox}\r\n//             labelWidth={140}\r\n//             helperText={inputErrorHandler.tmpPassword.message}\r\n//             error={inputErrorHandler.tmpPassword.error}\r\n//             onBlur={(event) => {\r\n//               if (event.target.value !== signupDetails.password) {\r\n//                 handleInputError(\r\n//                   \"tmpPassword\",\r\n//                   true,\r\n//                   \"Passwords are not same.\"\r\n//                 );\r\n//               }\r\n//             }}\r\n//           />\r\n//         </Grid> */}\r\n","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\MyJobs.js",["382","383","384","385","386","387"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { job, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [openUpdate, setOpenUpdate] = useState(false);\r\n  const [jobDetails, setJobDetails] = useState(job);\r\n\r\n  console.log(jobDetails);\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleClick = (location) => {\r\n    history.push(location);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    console.log(job._id);\r\n    axios\r\n      .delete(`${apiList.jobs}/${job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const handleJobUpdate = () => {\r\n    axios\r\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleCloseUpdate();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleCloseUpdate();\r\n      });\r\n  };\r\n\r\n  const postedOn = new Date(job.dateOfPosting);\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">{job.title}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n          </Grid>\r\n          <Grid item>Role : {job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n          </Grid>\r\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\r\n          <Grid item>\r\n            Remaining Number of Positions:{\" \"}\r\n            {job.maxPositions - job.acceptedCandidates}\r\n          </Grid>\r\n          <Grid item>\r\n            {job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item xs>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\r\n            >\r\n              View Applications\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpenUpdate(true);\r\n              }}\r\n              style={{\r\n                background: \"#FC7A1E\",\r\n                color: \"#fff\",\r\n              }}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n            >\r\n              Delete Job\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleDelete()}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleClose()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openUpdate}\r\n        onClose={handleCloseUpdate}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Update Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            spacing={3}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Application Deadline\"\r\n                type=\"datetime-local\"\r\n                value={jobDetails.deadline.substr(0, 16)}\r\n                onChange={(event) => {\r\n                  handleInput(\"deadline\", event.target.value);\r\n                }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Maximum Number Of Applicants\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxApplicants}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxApplicants\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Positions Available\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxPositions}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxPositions\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleJobUpdate()}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseUpdate()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst MyJobs = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [`myjobs=1`];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\">My Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <TextField\r\n              label=\"Search Jobs\"\r\n              value={searchOptions.query}\r\n              onChange={(event) =>\r\n                setSearchOptions({\r\n                  ...searchOptions,\r\n                  query: event.target.value,\r\n                })\r\n              }\r\n              onKeyPress={(ev) => {\r\n                if (ev.key === \"Enter\") {\r\n                  getData();\r\n                }\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment>\r\n                    <IconButton onClick={() => getData()}>\r\n                      <SearchIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              style={{ width: \"500px\" }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => {\r\n              return <JobTile job={job} getData={getData} />;\r\n            })\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyJobs;\r\n","D:\\INeuron Internship\\frontend\\src\\component\\recruiter\\Profile.js",["388","389","390"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        setPhone(response.data.contactNumber);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Profile</Typography>\r\n        </Grid>\r\n        <Grid item xs style={{ width: \"100%\" }}>\r\n          <Paper\r\n            style={{\r\n              padding: \"20px\",\r\n              outline: \"none\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              //   width: \"60%\",\r\n            }}\r\n          >\r\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={profileDetails.name}\r\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\r\n                  className={classes.inputBox}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  style={{ width: \"100%\" }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Bio (upto 250 words)\"\r\n                  multiline\r\n                  rows={8}\r\n                  style={{ width: \"100%\" }}\r\n                  variant=\"outlined\"\r\n                  value={profileDetails.bio}\r\n                  onChange={(event) => {\r\n                    if (\r\n                      event.target.value.split(\" \").filter(function (n) {\r\n                        return n != \"\";\r\n                      }).length <= 250\r\n                    ) {\r\n                      handleInput(\"bio\", event.target.value);\r\n                    }\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <PhoneInput\r\n                  country={\"in\"}\r\n                  value={phone}\r\n                  onChange={(phone) => setPhone(phone)}\r\n                  style={{ width: \"auto\" }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n              onClick={() => handleUpdate()}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\INeuron Internship\\frontend\\src\\lib\\isAuth.js",[],"D:\\INeuron Internship\\frontend\\src\\lib\\MessagePopup.js",["391"],"import { Snackbar, Slide } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst MessagePopup = (props) => {\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    props.setOpen(false);\r\n  };\r\n  return (\r\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\r\n      <Alert onClose={handleClose} severity={props.severity}>\r\n        {props.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default MessagePopup;\r\n","D:\\INeuron Internship\\frontend\\src\\lib\\PasswordInput.js",[],"D:\\INeuron Internship\\frontend\\src\\lib\\EmailInput.js",[],"D:\\INeuron Internship\\frontend\\src\\lib\\apiList.js",[],"D:\\INeuron Internship\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\index.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\App.js",["392"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Navbar.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Login.js",["393"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Welcome.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Home.js",["394","395","396","397","398","399","400"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Applications.js",["401","402","403","404","405","406","407","408","409"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Logout.js",["410"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Signup.js",["411","412"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\CreateJobs.js",["413","414"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\JobApplications.js",["415","416","417","418","419","420"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["421","422","423","424","425","426","427","428","429"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\Profile.js",["430","431","432","433","434","435","436"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\MyJobs.js",["437","438","439","440","441","442"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\MessagePopup.js",["443"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\component\\recruiter\\Profile.js",["444","445","446"],"C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\Hp\\Desktop\\frontend\\src\\lib\\FileUploadInput.js",[],{"ruleId":"447","severity":1,"message":"448","line":19,"column":8,"nodeType":"449","messageId":"450","endLine":19,"endColumn":14},{"ruleId":"447","severity":1,"message":"451","line":4,"column":3,"nodeType":"449","messageId":"450","endLine":4,"endColumn":12},{"ruleId":"447","severity":1,"message":"452","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":8},{"ruleId":"453","severity":1,"message":"454","line":459,"column":32,"nodeType":"455","messageId":"456","endLine":459,"endColumn":34},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"458","line":20,"column":8,"nodeType":"449","messageId":"450","endLine":20,"endColumn":18},{"ruleId":"453","severity":1,"message":"454","line":164,"column":28,"nodeType":"455","messageId":"456","endLine":164,"endColumn":30},{"ruleId":"459","severity":1,"message":"460","line":547,"column":6,"nodeType":"461","endLine":547,"endColumn":8,"suggestions":"462"},{"ruleId":"453","severity":1,"message":"454","line":563,"column":33,"nodeType":"455","messageId":"456","endLine":563,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":569,"column":33,"nodeType":"455","messageId":"456","endLine":569,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":575,"column":32,"nodeType":"455","messageId":"456","endLine":575,"endColumn":34},{"ruleId":"459","severity":1,"message":"463","line":16,"column":6,"nodeType":"461","endLine":16,"endColumn":8,"suggestions":"464"},{"ruleId":"447","severity":1,"message":"465","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":13},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"468","line":14,"column":3,"nodeType":"449","messageId":"450","endLine":14,"endColumn":19},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"447","severity":1,"message":"470","line":17,"column":3,"nodeType":"449","messageId":"450","endLine":17,"endColumn":11},{"ruleId":"459","severity":1,"message":"460","line":229,"column":6,"nodeType":"461","endLine":229,"endColumn":8,"suggestions":"471"},{"ruleId":"447","severity":1,"message":"472","line":1,"column":22,"nodeType":"449","messageId":"450","endLine":1,"endColumn":31},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"447","severity":1,"message":"474","line":109,"column":10,"nodeType":"449","messageId":"450","endLine":109,"endColumn":18},{"ruleId":"447","severity":1,"message":"475","line":109,"column":20,"nodeType":"449","messageId":"450","endLine":109,"endColumn":31},{"ruleId":"447","severity":1,"message":"476","line":110,"column":10,"nodeType":"449","messageId":"450","endLine":110,"endColumn":14},{"ruleId":"459","severity":1,"message":"460","line":137,"column":6,"nodeType":"461","endLine":137,"endColumn":8,"suggestions":"477"},{"ruleId":"447","severity":1,"message":"478","line":169,"column":9,"nodeType":"449","messageId":"450","endLine":169,"endColumn":20},{"ruleId":"447","severity":1,"message":"479","line":173,"column":9,"nodeType":"449","messageId":"450","endLine":173,"endColumn":20},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"458","line":21,"column":8,"nodeType":"449","messageId":"450","endLine":21,"endColumn":18},{"ruleId":"459","severity":1,"message":"460","line":714,"column":6,"nodeType":"461","endLine":714,"endColumn":8,"suggestions":"480"},{"ruleId":"453","severity":1,"message":"454","line":730,"column":33,"nodeType":"455","messageId":"456","endLine":730,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":736,"column":33,"nodeType":"455","messageId":"456","endLine":736,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":742,"column":32,"nodeType":"455","messageId":"456","endLine":742,"endColumn":34},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"468","line":14,"column":3,"nodeType":"449","messageId":"450","endLine":14,"endColumn":19},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"447","severity":1,"message":"481","line":20,"column":10,"nodeType":"449","messageId":"450","endLine":20,"endColumn":19},{"ruleId":"447","severity":1,"message":"482","line":450,"column":9,"nodeType":"449","messageId":"450","endLine":450,"endColumn":17},{"ruleId":"459","severity":1,"message":"460","line":717,"column":6,"nodeType":"461","endLine":717,"endColumn":8,"suggestions":"483"},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"459","severity":1,"message":"460","line":53,"column":6,"nodeType":"461","endLine":53,"endColumn":8,"suggestions":"484"},{"ruleId":"453","severity":1,"message":"454","line":164,"column":34,"nodeType":"455","messageId":"456","endLine":164,"endColumn":36},{"ruleId":"447","severity":1,"message":"485","line":1,"column":20,"nodeType":"449","messageId":"450","endLine":1,"endColumn":25},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"459","severity":1,"message":"460","line":668,"column":6,"nodeType":"461","endLine":668,"endColumn":8,"suggestions":"486"},{"ruleId":"447","severity":1,"message":"448","line":19,"column":8,"nodeType":"449","messageId":"450","endLine":19,"endColumn":14},{"ruleId":"459","severity":1,"message":"463","line":16,"column":6,"nodeType":"461","endLine":16,"endColumn":8,"suggestions":"487"},{"ruleId":"488","replacedBy":"489"},{"ruleId":"490","replacedBy":"491"},{"ruleId":"447","severity":1,"message":"451","line":4,"column":3,"nodeType":"449","messageId":"450","endLine":4,"endColumn":12},{"ruleId":"447","severity":1,"message":"465","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":13},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"468","line":14,"column":3,"nodeType":"449","messageId":"450","endLine":14,"endColumn":19},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"447","severity":1,"message":"470","line":17,"column":3,"nodeType":"449","messageId":"450","endLine":17,"endColumn":11},{"ruleId":"459","severity":1,"message":"460","line":229,"column":6,"nodeType":"461","endLine":229,"endColumn":8,"suggestions":"492"},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"447","severity":1,"message":"474","line":109,"column":10,"nodeType":"449","messageId":"450","endLine":109,"endColumn":18},{"ruleId":"447","severity":1,"message":"475","line":109,"column":20,"nodeType":"449","messageId":"450","endLine":109,"endColumn":31},{"ruleId":"447","severity":1,"message":"476","line":110,"column":10,"nodeType":"449","messageId":"450","endLine":110,"endColumn":14},{"ruleId":"459","severity":1,"message":"460","line":137,"column":6,"nodeType":"461","endLine":137,"endColumn":8,"suggestions":"493"},{"ruleId":"447","severity":1,"message":"478","line":169,"column":9,"nodeType":"449","messageId":"450","endLine":169,"endColumn":20},{"ruleId":"447","severity":1,"message":"479","line":173,"column":9,"nodeType":"449","messageId":"450","endLine":173,"endColumn":20},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"468","line":14,"column":3,"nodeType":"449","messageId":"450","endLine":14,"endColumn":19},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"447","severity":1,"message":"481","line":20,"column":10,"nodeType":"449","messageId":"450","endLine":20,"endColumn":19},{"ruleId":"447","severity":1,"message":"482","line":450,"column":9,"nodeType":"449","messageId":"450","endLine":450,"endColumn":17},{"ruleId":"459","severity":1,"message":"460","line":717,"column":6,"nodeType":"461","endLine":717,"endColumn":8,"suggestions":"494"},{"ruleId":"447","severity":1,"message":"472","line":1,"column":22,"nodeType":"449","messageId":"450","endLine":1,"endColumn":31},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"459","severity":1,"message":"460","line":668,"column":6,"nodeType":"461","endLine":668,"endColumn":8,"suggestions":"495"},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"458","line":20,"column":8,"nodeType":"449","messageId":"450","endLine":20,"endColumn":18},{"ruleId":"453","severity":1,"message":"454","line":164,"column":28,"nodeType":"455","messageId":"456","endLine":164,"endColumn":30},{"ruleId":"459","severity":1,"message":"460","line":547,"column":6,"nodeType":"461","endLine":547,"endColumn":8,"suggestions":"496"},{"ruleId":"453","severity":1,"message":"454","line":563,"column":33,"nodeType":"455","messageId":"456","endLine":563,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":569,"column":33,"nodeType":"455","messageId":"456","endLine":569,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":575,"column":32,"nodeType":"455","messageId":"456","endLine":575,"endColumn":34},{"ruleId":"447","severity":1,"message":"452","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":8},{"ruleId":"453","severity":1,"message":"454","line":459,"column":32,"nodeType":"455","messageId":"456","endLine":459,"endColumn":34},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"458","line":21,"column":8,"nodeType":"449","messageId":"450","endLine":21,"endColumn":18},{"ruleId":"459","severity":1,"message":"460","line":714,"column":6,"nodeType":"461","endLine":714,"endColumn":8,"suggestions":"497"},{"ruleId":"453","severity":1,"message":"454","line":730,"column":33,"nodeType":"455","messageId":"456","endLine":730,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":736,"column":33,"nodeType":"455","messageId":"456","endLine":736,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":742,"column":32,"nodeType":"455","messageId":"456","endLine":742,"endColumn":34},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"459","severity":1,"message":"460","line":53,"column":6,"nodeType":"461","endLine":53,"endColumn":8,"suggestions":"498"},{"ruleId":"453","severity":1,"message":"454","line":164,"column":34,"nodeType":"455","messageId":"456","endLine":164,"endColumn":36},{"ruleId":"447","severity":1,"message":"485","line":1,"column":20,"nodeType":"449","messageId":"450","endLine":1,"endColumn":25},{"ruleId":"447","severity":1,"message":"448","line":19,"column":8,"nodeType":"449","messageId":"450","endLine":19,"endColumn":14},{"ruleId":"447","severity":1,"message":"451","line":4,"column":3,"nodeType":"449","messageId":"450","endLine":4,"endColumn":12},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"458","line":20,"column":8,"nodeType":"449","messageId":"450","endLine":20,"endColumn":18},{"ruleId":"453","severity":1,"message":"454","line":164,"column":28,"nodeType":"455","messageId":"456","endLine":164,"endColumn":30},{"ruleId":"459","severity":1,"message":"460","line":547,"column":6,"nodeType":"461","endLine":547,"endColumn":8,"suggestions":"499"},{"ruleId":"453","severity":1,"message":"454","line":563,"column":33,"nodeType":"455","messageId":"456","endLine":563,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":569,"column":33,"nodeType":"455","messageId":"456","endLine":569,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":575,"column":32,"nodeType":"455","messageId":"456","endLine":575,"endColumn":34},{"ruleId":"447","severity":1,"message":"465","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":13},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"468","line":14,"column":3,"nodeType":"449","messageId":"450","endLine":14,"endColumn":19},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"447","severity":1,"message":"470","line":17,"column":3,"nodeType":"449","messageId":"450","endLine":17,"endColumn":11},{"ruleId":"459","severity":1,"message":"460","line":229,"column":6,"nodeType":"461","endLine":229,"endColumn":8,"suggestions":"500"},{"ruleId":"459","severity":1,"message":"463","line":16,"column":6,"nodeType":"461","endLine":16,"endColumn":8,"suggestions":"501"},{"ruleId":"447","severity":1,"message":"452","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":8},{"ruleId":"453","severity":1,"message":"454","line":459,"column":32,"nodeType":"455","messageId":"456","endLine":459,"endColumn":34},{"ruleId":"447","severity":1,"message":"472","line":1,"column":22,"nodeType":"449","messageId":"450","endLine":1,"endColumn":31},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"459","severity":1,"message":"460","line":668,"column":6,"nodeType":"461","endLine":668,"endColumn":8,"suggestions":"502"},{"ruleId":"447","severity":1,"message":"466","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":17},{"ruleId":"447","severity":1,"message":"451","line":10,"column":3,"nodeType":"449","messageId":"450","endLine":10,"endColumn":12},{"ruleId":"447","severity":1,"message":"467","line":13,"column":3,"nodeType":"449","messageId":"450","endLine":13,"endColumn":9},{"ruleId":"447","severity":1,"message":"468","line":14,"column":3,"nodeType":"449","messageId":"450","endLine":14,"endColumn":19},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"469","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":11},{"ruleId":"447","severity":1,"message":"481","line":20,"column":10,"nodeType":"449","messageId":"450","endLine":20,"endColumn":19},{"ruleId":"447","severity":1,"message":"482","line":450,"column":9,"nodeType":"449","messageId":"450","endLine":450,"endColumn":17},{"ruleId":"459","severity":1,"message":"460","line":717,"column":6,"nodeType":"461","endLine":717,"endColumn":8,"suggestions":"503"},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"447","severity":1,"message":"474","line":109,"column":10,"nodeType":"449","messageId":"450","endLine":109,"endColumn":18},{"ruleId":"447","severity":1,"message":"475","line":109,"column":20,"nodeType":"449","messageId":"450","endLine":109,"endColumn":31},{"ruleId":"447","severity":1,"message":"476","line":110,"column":10,"nodeType":"449","messageId":"450","endLine":110,"endColumn":14},{"ruleId":"459","severity":1,"message":"460","line":137,"column":6,"nodeType":"461","endLine":137,"endColumn":8,"suggestions":"504"},{"ruleId":"447","severity":1,"message":"478","line":169,"column":9,"nodeType":"449","messageId":"450","endLine":169,"endColumn":20},{"ruleId":"447","severity":1,"message":"479","line":173,"column":9,"nodeType":"449","messageId":"450","endLine":173,"endColumn":20},{"ruleId":"447","severity":1,"message":"457","line":15,"column":3,"nodeType":"449","messageId":"450","endLine":15,"endColumn":12},{"ruleId":"447","severity":1,"message":"458","line":21,"column":8,"nodeType":"449","messageId":"450","endLine":21,"endColumn":18},{"ruleId":"459","severity":1,"message":"460","line":714,"column":6,"nodeType":"461","endLine":714,"endColumn":8,"suggestions":"505"},{"ruleId":"453","severity":1,"message":"454","line":730,"column":33,"nodeType":"455","messageId":"456","endLine":730,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":736,"column":33,"nodeType":"455","messageId":"456","endLine":736,"endColumn":35},{"ruleId":"453","severity":1,"message":"454","line":742,"column":32,"nodeType":"455","messageId":"456","endLine":742,"endColumn":34},{"ruleId":"447","severity":1,"message":"485","line":1,"column":20,"nodeType":"449","messageId":"450","endLine":1,"endColumn":25},{"ruleId":"447","severity":1,"message":"473","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":8},{"ruleId":"459","severity":1,"message":"460","line":53,"column":6,"nodeType":"461","endLine":53,"endColumn":8,"suggestions":"506"},{"ruleId":"453","severity":1,"message":"454","line":164,"column":34,"nodeType":"455","messageId":"456","endLine":164,"endColumn":36},"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'FormGroup' is defined but never used.","'Pagination' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["507"],"React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.",["508"],"'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.",["509"],"'useEffect' is defined but never used.","'Modal' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["510"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.",["511"],"'useParams' is defined but never used.","'colorSet' is assigned a value but never used.",["512"],["513"],"'Slide' is defined but never used.",["514"],["515"],"no-native-reassign",["516"],"no-negated-in-lhs",["517"],["518"],["519"],["520"],["521"],["522"],["523"],["524"],["525"],["526"],["527"],["528"],["529"],["530"],["531"],["532"],{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"533","fix":"537"},{"desc":"533","fix":"538"},{"desc":"533","fix":"539"},{"desc":"533","fix":"540"},{"desc":"533","fix":"541"},{"desc":"533","fix":"542"},{"desc":"535","fix":"543"},"no-global-assign","no-unsafe-negation",{"desc":"533","fix":"544"},{"desc":"533","fix":"545"},{"desc":"533","fix":"546"},{"desc":"533","fix":"547"},{"desc":"533","fix":"548"},{"desc":"533","fix":"549"},{"desc":"533","fix":"550"},{"desc":"533","fix":"551"},{"desc":"533","fix":"552"},{"desc":"535","fix":"553"},{"desc":"533","fix":"554"},{"desc":"533","fix":"555"},{"desc":"533","fix":"556"},{"desc":"533","fix":"557"},{"desc":"533","fix":"558"},"Update the dependencies array to be: [getData]",{"range":"559","text":"560"},"Update the dependencies array to be: [setPopup]",{"range":"561","text":"562"},{"range":"563","text":"560"},{"range":"564","text":"560"},{"range":"565","text":"560"},{"range":"566","text":"560"},{"range":"567","text":"560"},{"range":"568","text":"560"},{"range":"569","text":"562"},{"range":"570","text":"560"},{"range":"571","text":"560"},{"range":"572","text":"560"},{"range":"573","text":"560"},{"range":"574","text":"560"},{"range":"575","text":"560"},{"range":"576","text":"560"},{"range":"577","text":"560"},{"range":"578","text":"560"},{"range":"579","text":"562"},{"range":"580","text":"560"},{"range":"581","text":"560"},{"range":"582","text":"560"},{"range":"583","text":"560"},{"range":"584","text":"560"},[17123,17125],"[getData]",[437,439],"[setPopup]",[6215,6217],[3540,3542],[22167,22169],[22424,22426],[1091,1093],[19960,19962],[437,439],[6215,6217],[3540,3542],[22424,22426],[19960,19962],[17123,17125],[22167,22169],[1091,1093],[17123,17125],[6215,6217],[437,439],[19960,19962],[22424,22426],[3540,3542],[22167,22169],[1091,1093]]